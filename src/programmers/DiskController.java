package programmers;

import java.util.*;

/**
 * ## 문제 설명 :
 *      하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다.
 *      디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다.
 *      가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다.
 *      예를들어
 *          - 0ms 시점에 3ms가 소요되는 A작업 요청
 *          - 1ms 시점에 9ms가 소요되는 B작업 요청
 *          - 2ms 시점에 6ms가 소요되는 C작업 요청
 *      와 같은 요청이 들어왔습니다.
 *
 *      한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다.
 *          - A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)
 *          - B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료(요청에서 종료까지 : 11ms)
 *          - C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 16ms)
 *
 *      이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(= (3 + 11 + 16) / 3)가 됩니다.
 *
 *      하지만 A → C → B 순서대로 처리하면
 *          - A: 3ms 시점에 작업 완료(요청에서 종료까지 : 3ms)
 *          - C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지 : 7ms)
 *          - B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 17ms)
 *
 *      이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(= (3 + 7 + 17) / 3)가 됩니다.
 *
 *      각 작업에 대해 [작업이 요청되는 시점, 작업의 소요시간]을 담은 2차원 배열 jobs가 매개변수로 주어질 때,
 *      작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지
 *      return 하도록 solution 함수를 작성해주세요. (단, 소수점 이하의 수는 버립니다)
 *
 * ## 제한 사항
 *      * jobs의 길이는 1 이상 500 이하입니다.
 *      * jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.
 *      * 각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.
 *      * 각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.
 *      * 하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.
 *
 * ## 입출력 예
 *  input : jobs = [[0, 3], [1, 9], [2, 6]]
 *  output : result = 9
 *
 */
public class DiskController {

    public static void main(String[] args) {
        DiskController a = new DiskController();
        int[][] jobs = {{0, 3}, {1, 9}, {2, 6}};

        int result = a.solution(jobs);

        System.out.println("Result : " + result);
    }

    public int solution(int[][] jobs) {
        /**
         * 1. 앞순서가 완료될때까지 뒷순서는 작업을 시작할 수 없다(계산이 이루어지면 안된다)
         * 2. 들어온 순서가 아닌 각 작업이 완료되는데에 최소치 순서로 진행이 되어야 평균치를 낮출 수 있다.
         * 3. 처음부터 순서를 정할 수 없다. 이 문제에서는 요청시간이 주어지므로 요청시간순으로 1차 정렬한다.
         * 4. 대기 큐와 작업 큐 두개의 우선순위 큐를 준비한다.
         *      대기 큐 : 요청시간을 기준으로 오름차순 정렬한다.
         *      작업 큐 : 작업시간을 기준으로 오름차순 정렬한다.
         * 5. 대기 큐에 먼저 모든 작업들을 저장한다.
         * 6. 현재시간 이하(작거나 같은)의 요청시간을 가지는 작업들을 작업 큐로 옮긴다.
         * 7. 작업 큐에 작업을 꺼내어 현재 시간에 작업 시간을 더한다.
         * 8. 현재시간에 작업의 요청시간을 빼서 해당 작업이 완료되기까지의 총 소요 시간을 구한다.
         * 9. 해당 작업은 완료되었으니 완료된 작업수를 1 증가한다.
         * 10. 대기큐에 작업들이 남아있으나 작업큐에 작업들이 남아있지 않다면
         *      현재시간이 대기 큐에 존재하는 작업들의 요청시간보다 작다는 뜻이므로
         *      현재시간을 1씩 계속 증가시킨다.
         */

        // 대기큐
        Queue<int[]> waiting = new PriorityQueue<>((a, b) -> (a[0] - b[0]));
        // 작업큐
        Queue<int[]> working = new PriorityQueue<>((a, b) -> (a[1] - b[1]));

        // 대기큐에 작업들 저장(우선순위 큐이므로 요청시간을 기준으로 오름차순 정렬된다.
        for (int[] job : jobs) {
            waiting.offer(job);
        }

        int result = 0; // 작업이 완료되기까지의 총 소요시간
        int cnt = 0;    // 완료된 작업 수
        int time = waiting.peek()[0];   // 대기큐에서 가장 첫번째 요청시간을 확인한다.

        // 작업이 완료될때까지
        while (cnt < jobs.length) {
            // 작업큐가 비어있지않고, 대기중인 작업들중 현재시간보다 요청시간이 작거나 같은것들은
            // 모두 작업큐로 저장
            while (!waiting.isEmpty() && waiting.peek()[0] <= time) {
                working.offer(waiting.poll());
            }

            // 작업큐가 비어있지 않다면
            if (!working.isEmpty()) {
                // 먼저 저장된 작업을 꺼내어
                int[] job = working.poll();
                // 현지시간에 꺼낸 작업의 소요시간을 더하고
                time += job[1];
                // 현재시간에서 작업의 원래 요청시간을 빼내어서 해당 작업의 총 소요시간을 구한다.
                result += time - job[0];

                // 그리고 작업완료 카운트 증가
                cnt++;
            } else {
                // 작업큐가 비어있는 경우 현재시간에 +1을 더해 시간을 계속 진행시킨다.
                // 만약 1 -> 3, 6 -> 8 두개의 작업이 존재할때에는
                // 첫번째 작업이 끝난 후 작업이 남아있는 상태에서 현재시간을 증가시켜야
                // 두번째 작업의 요청시간에 도달할 수 있다.
                time++;
            }
        }

        // 총 소요시간 / 작업 수
        return result / cnt;
    }

}
